// --- grid system ---
.container {
  max-width: 1296px + $gutter-width;
  margin: 0px auto;
  padding: 0px $gutter-width/2;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0px (-$gutter-width/2);
}

$col: (
  4: 33.3333%,
  6: 50%,
  8: 66.6667%,
  12: 100%,
);

@each $column, $width in $col {
  .col-#{$column} {
    width: $width;
    flex: 0 0 auto;
    padding: 0px $gutter-width/2;
  }
}

@each $size, $breakpoints in $grid-breakpoints {
  @include media($breakpoints) {
    @each $column, $width in $col {
      .col-#{$size}-#{$column} {
        width: $width;
      }
    }
  }
}

// --- display ---
$display: (flex, none, block);

@each $item in $display {
  .d-#{$item} {
    display: $item;
  }
}

@each $size, $breakpoints in $grid-breakpoints {
  @include media($breakpoints) {
    @each $item in $display {
      .d-#{$size}-#{$item} {
        display: $item;
      }
    }
  }
}

// --- flex ---
$align-items: (center, stretch);

@each $item in $align-items {
  .align-items-#{$item} {
    align-items: $item;
  }
}
$justify-content: (
  center: center,
  between: space-between,
  end: flex-end,
);

@each $key, $value in $justify-content {
  .justify-content-#{$key} {
    justify-content: $value;
  }
}

@each $size, $breakpoints in $grid-breakpoints {
  @include media($breakpoints) {
    @each $key, $value in $justify-content {
      .justify-content-#{$size}-#{$key} {
        justify-content: $value;
      }
    }
  }
}

$flex-direction: (column, row, column-reverse, row-reverse);

@each $item in $flex-direction {
  .flex-#{$item} {
    flex-direction: $item;
  }
}
@each $size, $breakpoints in $grid-breakpoints {
  @include media($breakpoints) {
    @each $item in $flex-direction {
      .flex-#{$size}-#{$item} {
        flex-direction: $item;
      }
    }
  }
}

$flex-wrap: (wrap, nowrap);

@each $item in $flex-wrap {
  .flex-#{$item} {
    flex-wrap: $item;
  }
}

@each $size, $breakpoints in $grid-breakpoints {
  @include media($breakpoints) {
    @each $item in $flex-wrap {
      .flex-#{$size}-#{$item} {
        flex-wrap: $item;
      }
    }
  }
}

$flex-grow: (1);
@each $item in $flex-grow {
  .flex-grow-#{$item} {
    flex-grow: $item;
  }
}

// ---margin、padding---
$direction: (
  t: top,
  b: bottom,
  e: right,
  s: left,
  y: '',
);
$distance: (
  8: 8px,
  12: 12px,
  16: 16px,
  20: 20px,
  24: 24px,
  32: 32px,
  36: 36px,
  40: 40px,
  48: 48px,
  64: 64px,
  80: 80px,
  100: 100px,
  auto: auto,
);

@each $key, $value in $direction {
  @each $disKey, $disVal in $distance {
    .m#{$key}-#{$disKey} {
      @if ($key == 'y') {
        margin: 0 #{$disVal};
      } @else {
        margin-#{$value}: #{$disVal};
      }
    }
  }
}

@each $size, $breakpoints in $grid-breakpoints {
  @include media($breakpoints) {
    @each $key, $value in $direction {
      @each $disKey, $disVal in $distance {
        .m#{$key}-#{$size}-#{$disKey} {
          @if ($key == 'y') {
            margin: 0 #{$disVal};
          } @else {
            margin-#{$value}: #{$disVal};
          }
        }
      }
    }
  }
}
// --- 文字相關 ---

$font-weight: (
  bold: 700,
  bolder: 900,
);

@each $key, $value in $font-weight {
  .fw-#{$key} {
    font-weight: $value;
  }
}

$display-font-size: (
  1: 160px,
  2: 120px,
  3: 80px,
);

$title-font-size: (
  1: 48px,
  2: 40px,
  3: 32px,
  4: 28px,
  5: 24px,
  6: 20px,
);

@mixin font-style {
  font-weight: 900;
  line-height: 120%;
}

@each $key, $value in $display-font-size {
  .display-#{$key} {
    font-size: $value;
    @include font-style;
  }
}

@each $key, $value in $title-font-size {
  .h#{$key} {
    font-size: $value;
    @include font-style;
  }
}

$title-font-size-md: (
  1: 48px,
  2: 32px,
  3: 28px,
  4: 24px,
  5: 20px,
  6: 18px,
);

@each $key, $value in $title-font-size-md {
  @include media(768px) {
    .h#{$key}-md {
      font-size: $value;
    }
  }
}

$font-size: (
  1: 48px,
  2: 40px,
  3: 32px,
  4: 28px,
  5: 24px,
  6: 20px,
  s: 16px,
  xs: 12px,
);

@each $key, $value in $font-size {
  .fs-#{$key} {
    font-size: $value;
  }
}

@each $key, $value in $font-size {
  @include media(768px) {
    .fs-#{$key}-md {
      font-size: $value;
    }
  }
}

.text-align {
  &-center {
    text-align: center;
  }
}

.text-white {
  color: $primary;
}
.text-black {
  color: black;
}

.overflow-hidden {
  overflow: hidden;
}

.border {
  border: $border-width solid $border-color;
  &-bottom {
    border-bottom: $border-width solid $border-color;
  }
  &-0 {
    border: 0;
  }
}
.rounded {
  border-radius: 16px;
}
.line-height {
  &-normal {
    line-height: 150%;
  }
}

$object-fit: (cover, contain);
@each $item in $object-fit {
  .object-fit-#{$item} {
    object-fit: $item;
  }
}
